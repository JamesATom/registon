services:
    gateway:
        build: 
            context: .
            dockerfile: apps/gateway/Dockerfile
        ports:
            - "8000:8000"
        environment:
            PORT: 8000
            RABBITMQ_URL: amqp://rabbitmq:5672
            RABBITMQ_COMMUNITY_SERVICE_QUEUE: community_service_queue
            APP_NAME_1: Registon
            APP_NAME_2: Gateway
            REGISTON_BACKEND_URL_FRONT_WEB: https://backend.edutizim.uz/moderator-web-api
            MONGODB_URI: mongodb://mongodb:27017/registon
            REDIS_URL: redis://redis:6379
            REDIS_HOST: redis
            REDIS_PORT: 6379
            NODE_ENV: production
            DO_SPACES_REGION: fra1
            DO_SPACES_ENDPOINT: fra1.digitaloceanspaces.com
            DO_SPACES_KEY: DO80182Q4BUZ98EEHV2R
            DO_SPACES_SECRET: q4AaseFy/RlY5Q/F6w/h6ynCHBbKYszf9Ep3XreF71E
            DO_SPACES_BUCKET: registon-edu
        depends_on:
            rabbitmq:
                condition: service_healthy
            redis:
                condition: service_healthy
        restart: on-failure

    community-service:
        build:
            context: .
            dockerfile: apps/community-service/Dockerfile
        ports:
            - "8001:8001"
        environment:
            PORT: 8001
            RABBITMQ_URL: amqp://rabbitmq:5672
            RABBITMQ_COMMUNITY_SERVICE_QUEUE: community_service_queue
            REDIS_URL: redis://redis:6379
            REDIS_HOST: redis
            REDIS_PORT: 6379
            MONGODB_URI: mongodb://admin:password@mongodb:27017/registan?authSource=admin
            NODE_ENV: production
        depends_on:
            rabbitmq:
                condition: service_healthy
            redis:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        restart: on-failure

    rabbitmq:
        image: rabbitmq:3-management
        ports:
            - "5672:5672"    
            - "15672:15672"  
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
            interval: 10s
            timeout: 20s
            retries: 5
            start_period: 40s

    redis:
        container_name: redis
        image: redis:7
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
        command: redis-server --appendonly yes --appendfsync everysec
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always

    mongodb:
        image: mongo:6.0
        ports:
            - "27017:27017"
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: password
        volumes:
            - mongodb_data:/data/db
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 40s
        restart: always

volumes:
    rabbitmq_data:
    mongodb_data:
    redis_data:

# networks: