
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.IeltsExamScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  dateExam: 'dateExam',
  cityId: 'cityId',
  calendarId: 'calendarId',
  commentUser: 'commentUser',
  commentAdmin: 'commentAdmin'
};

exports.Prisma.IeltsRegistrationScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  examId: 'examId',
  registeredAt: 'registeredAt'
};

exports.Prisma.IeltsCalendarScalarFieldEnum = {
  id: 'id',
  examDate: 'examDate',
  maxStudents: 'maxStudents',
  isAvailable: 'isAvailable',
  cityId: 'cityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  branchName: 'branchName'
};

exports.Prisma.MockRegistrationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  commentUser: 'commentUser',
  commentAdmin: 'commentAdmin',
  title: 'title',
  date: 'date',
  branchId: 'branchId',
  isActive: 'isActive'
};

exports.Prisma.MockRegistrationStudentScalarFieldEnum = {
  id: 'id',
  mockRegistrationId: 'mockRegistrationId',
  studentName: 'studentName',
  studentPhoneNumber: 'studentPhoneNumber',
  studentId: 'studentId',
  registeredAt: 'registeredAt'
};

exports.Prisma.JobHuntingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  title: 'title',
  description: 'description',
  workExperience: 'workExperience',
  companyId: 'companyId',
  cityId: 'cityId',
  certificateRequirements: 'certificateRequirements',
  workScheduleHours: 'workScheduleHours',
  employmentType: 'employmentType',
  workMode: 'workMode',
  salary: 'salary',
  responsibilities: 'responsibilities',
  requirements: 'requirements',
  conditions: 'conditions'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  companyTitle: 'companyTitle',
  description: 'description',
  companyLogo: 'companyLogo'
};

exports.Prisma.CVScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  studentId: 'studentId',
  description: 'description',
  cityId: 'cityId',
  degree: 'degree',
  universityTitle: 'universityTitle',
  universityMajor: 'universityMajor',
  graduationYear: 'graduationYear',
  companyName: 'companyName',
  position: 'position',
  responsibilities: 'responsibilities',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ToolScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CvSkillScalarFieldEnum = {
  cvId: 'cvId',
  skillId: 'skillId'
};

exports.Prisma.CvToolScalarFieldEnum = {
  cvId: 'cvId',
  toolId: 'toolId'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.WorkExperience = exports.$Enums.WorkExperience = {
  EXPERIENCE_1_3: 'EXPERIENCE_1_3',
  EXPERIENCE_3_6: 'EXPERIENCE_3_6',
  EXPERIENCE_6_PLUS: 'EXPERIENCE_6_PLUS',
  NO_EXPERIENCE: 'NO_EXPERIENCE'
};

exports.WorkScheduleHours = exports.$Enums.WorkScheduleHours = {
  SCHEDULE_6_1: 'SCHEDULE_6_1',
  SCHEDULE_5_2: 'SCHEDULE_5_2',
  WEEKENDS: 'WEEKENDS',
  FREE: 'FREE',
  OTHER: 'OTHER'
};

exports.EmploymentType = exports.$Enums.EmploymentType = {
  FULL: 'FULL',
  PART: 'PART'
};

exports.WorkMode = exports.$Enums.WorkMode = {
  OFFLINE: 'OFFLINE',
  ONLINE: 'ONLINE',
  HYBRID: 'HYBRID'
};

exports.Degree = exports.$Enums.Degree = {
  BACHELOR: 'BACHELOR',
  MASTER: 'MASTER',
  DOCTORATE: 'DOCTORATE',
  ASSOCIATE: 'ASSOCIATE',
  PHD: 'PHD'
};

exports.Prisma.ModelName = {
  IeltsExam: 'IeltsExam',
  IeltsRegistration: 'IeltsRegistration',
  IeltsCalendar: 'IeltsCalendar',
  City: 'City',
  Branch: 'Branch',
  MockRegistration: 'MockRegistration',
  MockRegistrationStudent: 'MockRegistrationStudent',
  JobHunting: 'JobHunting',
  Company: 'Company',
  CV: 'CV',
  Skill: 'Skill',
  Tool: 'Tool',
  CvSkill: 'CvSkill',
  CvTool: 'CvTool',
  Certificate: 'Certificate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
