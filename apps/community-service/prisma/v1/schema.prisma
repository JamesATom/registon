generator client {
  provider = "prisma-client-js"
  output = "../../src/common/prisma/client/v1"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_V1")
}

// model IeltsExam {
//   id           String   @id @default(uuid())
//   createdAt    DateTime @default(now())
//   createdBy    String
//   updatedAt    DateTime @updatedAt
//   updatedBy    String?
//   dateExam     DateTime
//   cityId       String
//   isActive    Boolean? @default(true) 
//   commentUser  String?  @db.VarChar(250)
//   commentAdmin String?  @db.VarChar(250)

//   city     City                @relation(fields: [cityId], references: [id])
//   students IeltsRegistrationStudent[]

//   @@index([cityId])
//   @@index([dateExam])
//   @@index([isActive])
// }

// model IeltsRegistrationStudent {
//   id           String    @id @default(uuid())
//   examId       String    @unique
//   studentId    String    @db.VarChar(36)
//   registeredAt DateTime  @default(now())

//   exam         IeltsExam @relation(fields: [examId], references: [id])

//   @@unique([studentId, examId])
//   @@index([studentId])
//   @@index([examId])
// }


// model MockRegistration {
//   id           String   @id @default(uuid())
//   createdAt    DateTime @default(now())
//   createdBy    String
//   updatedAt    DateTime @updatedAt
//   updatedBy    String?
//   commentUser  String?  @db.VarChar(250)
//   commentAdmin String?  @db.VarChar(250)
//   title        String?  @db.VarChar(50)
//   date         DateTime
//   branchId     String
//   isActive     Boolean  @default(true)
  
//   students     MockRegistrationStudent[]
  
//   @@index([date])
//   @@index([title])
// }

// model MockRegistrationStudent {
//   id                String          @id @default(uuid())
//   studentId         String          @db.VarChar(36)
//   mockRegistrationId String         @unique
//   registeredAt      DateTime        @default(now())
  
//   mockRegistration  MockRegistration @relation(fields: [mockRegistrationId], references: [id])
  
//   @@unique([studentId, mockRegistrationId])
//   @@index([studentId])
//   @@index([mockRegistrationId])
// }

model City {
  id   String @id @default(uuid())
  name String @db.VarChar(100) @unique

  // ieltsExams IeltsExam[]
  jobHuntings JobHunting[] @relation("jobHuntingCity")
  cvs        CV[]         @relation("cvCity")
  universities            University[]
}

// Job Hunting model
model JobHunting {
  id                     String           @id @default(uuid())
  createdAt              DateTime         @default(now())
  createdBy              String
  updatedAt              DateTime         @updatedAt
  updatedBy              String?
  title                  String           @db.VarChar(50)
  description            String?          @db.VarChar(250)
  workExperience         WorkExperience
  companyId              String?
  company                Company?         @relation(fields: [companyId], references: [id])
  cityId                 String?
  city                   City? @relation("jobHuntingCity", fields: [cityId], references: [id])
  certificateRequirements String?
  workScheduleHours      WorkScheduleHours?
  employmentType         EmploymentType?
  workMode               WorkMode?
  salary                 Int?
  responsibilities       String?          @db.VarChar(500)
  requirements           String?          @db.VarChar(500)
  conditions             String?          @db.VarChar(500)

  @@index([companyId])
  @@index([cityId])
  @@index([title])
  @@index([workExperience])
}

// Company model
model Company {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  createdBy    String
  updatedAt    DateTime     @updatedAt
  updatedBy    String?
  companyTitle String       @db.VarChar(50)
  description  String?      @db.VarChar(250)
  companyLogo  String?
  jobHuntings  JobHunting[]

  @@index([companyTitle])
}

// CV model
model CV {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  studentId         String
  description       String?   @db.VarChar(250)
  cityId            String
  city              City      @relation("cvCity", fields: [cityId], references: [id])
  degree            Degree?
  universityTitle   String?   @db.VarChar(50)
  universityMajor   String?
  graduationYear    Int?
  skills            CvSkill[]
  tools             CvTool[]
  companyName       String?   @db.VarChar(50)
  position          String?   @db.VarChar(50)
  responsibilities  String?   @db.VarChar(50)
  startDate         DateTime?
  endDate           DateTime?

  @@index([studentId])
  @@index([cityId])
  @@index([universityTitle])
}

// Many-to-many relation tables
model Skill {
  id    String    @id @default(uuid())
  name  String    @unique
  cvs   CvSkill[]
}

model Tool {
  id    String   @id @default(uuid())
  name  String   @unique
  cvs   CvTool[]
}

model CvSkill {
  cvId    String
  skillId String
  cv      CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([cvId, skillId])
  @@index([cvId])
  @@index([skillId])
}

model CvTool {
  cvId   String
  toolId String
  cv     CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@id([cvId, toolId])
  @@index([cvId])
  @@index([toolId])
}

model University {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now()) @map("createdAt")
  createdBy               String?   @map("createdBy")
  updatedAt               DateTime  @updatedAt @map("updatedAt")
  updatedBy               String?   @map("updatedBy")
  title                   String    @db.VarChar(100)
  description             String?   @db.VarChar(500)
  registrationDate        DateTime  @map("registrationDate")
  type                    UniType?
  status                  Boolean?
  contract                String    @db.VarChar(100)
  contacts                Int?
  website                 String?   @db.VarChar(50)
  email                   String?   @db.VarChar(50)
  address                 String?   @db.VarChar(100)
  logo                    String?
  license                 String?

  cityId                  String?   @map("cityId")
  certificateRequirementId String?  @map("certificateRequirementId")
  
  city                    City?     @relation(fields: [cityId], references: [id])
  certificateRequirement  CertificateRequirements? @relation(fields: [certificateRequirementId], references: [id])
  programs                Program[]
  faculties               Faculty[]

  @@map("universities")
}

model Program {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now()) @map("createdAt")
  createdBy               String?   @map("createdBy")
  updatedAt               DateTime  @updatedAt @map("updatedAt")
  updatedBy               String?   @map("updatedBy")
  title                   String    @db.VarChar(100)
  studyLanguage           StudyLanguage @map("studyLanguage")
  contract                Int
  degree                  Degree
  studyType               StudyType?
  
  facultyId               String?   @map("facultyId")
  universityId            String    @map("universityId")
  certificateRequirementId String?  @map("certificateRequirementId")
  
  university              University @relation(fields: [universityId], references: [id])
  faculty                 Faculty?   @relation(fields: [facultyId], references: [id])
  certificateRequirement  CertificateRequirements? @relation(fields: [certificateRequirementId], references: [id])

  @@map("programs")
}

model Faculty {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now()) @map("createdAt")
  createdBy               String?   @map("createdBy")
  updatedAt               DateTime  @updatedAt @map("updatedAt")
  updatedBy               String?   @map("updatedBy")
  facultyTitle            String    @map("facultyTitle") @db.VarChar(50)
  description             String?   @db.VarChar(250)
  
  universityId            String    @map("universityId")
  
  university              University @relation(fields: [universityId], references: [id])
  programs                Program[]

  @@map("faculties")
}

model CertificateRequirements {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now()) @map("createdAt")
  createdBy               String?   @map("createdBy")
  updatedAt               DateTime  @updatedAt @map("updatedAt")
  updatedBy               String?   @map("updatedBy")
  certificateRequirementsTitle String @map("certificateRequirementsTitle") @db.VarChar(50)
  description             String?   @db.VarChar(250)
  
  universities            University[]
  programs                Program[]

  @@map("certificateRequirements")
}



// Certificate model for certificate requirements
model Certificate {
  id    String @id @default(uuid())
  name  String @unique
}

// Enums for job hunting module
enum WorkExperience {
  Experience13
  Experience36
  Experience6Plus
  NoExperience
}

enum WorkScheduleHours {
  Schedule61
  Schedule52
  Weekends
  Free
  Other
}

enum EmploymentType {
  Full
  Part
}

enum WorkMode {
  Offline
  Online
  Hybrid
}

enum Degree {
  Bachelor
  Master
  Doctorate
  Associate
  Phd
}

enum UniType {
  Local
  International
  Foreign
}

enum StudyLanguage {
  Uzbek
  Russian
  English
}

enum StudyType {
  FullTime
  PartTime
  Remote
  Hybrid
}