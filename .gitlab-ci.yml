stages:
    - build
    - deploy

variables:
    YARN_CACHE_FOLDER: .yarn-cache
#     NODE_IMAGE: node:20

workflow:
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
          when: always
          variables:
            GIT_STRATEGY: fetch
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
          when: always
          variables:
            GIT_STRATEGY: fetch
        - when: never
    auto_cancel:
        on_new_commit: interruptible

cache: &global_cache
    key:
        files:
            - yarn.lock
    paths:
        - .yarn-cache
        - apps/gateway/node_modules
        - apps/community-service/node_modules
    policy: pull-push

build_gateway:
    # image: ${NODE_IMAGE}
    stage: build
    tags:
        - remote-shell-dev
    interruptible: true
    parallel: 2
    cache:
        <<: *global_cache
        paths:
            - apps/gateway/node_modules
            - .yarn-cache
    script:
        - echo "Building Gateway"
        - cd apps/gateway
        - yarn install
        - yarn build

build_community_service:
    # image: ${NODE_IMAGE}
    stage: build
    tags:
        - remote-shell-community-service-dev
    interruptible: true
    parallel: 2
    cache:
        <<: *global_cache
        paths:
            - apps/community-service/node_modules
            - .yarn-cache
    script:
        - echo "Building Community Service"
        - cd apps/community-service
        - yarn install
        - yarn build

deploy:
    stage: deploy
    tags:
        - remote-shell-dev
    interruptible: true
    script:
        - echo "Deploying to Remote Dev Server"
        - docker compose -f docker-compose.yml down
        - docker compose -f docker-compose.yml up -d --build