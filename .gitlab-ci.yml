stages:
    - build
    - deploy

variables:
    YARN_CACHE_FOLDER: .yarn-cache
#     NODE_IMAGE: node:20

workflow:
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
          when: always
          variables:
            GIT_STRATEGY: fetch
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
          when: always
          variables:
            GIT_STRATEGY: fetch
        - when: never
    auto_cancel:
        on_new_commit: interruptible

cache: &global_cache
    key:
        files:
            - yarn.lock
    paths:
        - .yarn-cache
    policy: pull-push

# build_gateway:
#     # image: ${NODE_IMAGE}
#     stage: build
#     tags:
#         - remote-shell-dev
#     interruptible: true
#     parallel: 1

#     script:
#         - echo "ðŸ§¹ Freeing up disk space..."
#         - docker system prune -af || true
#         - docker volume prune -f || true
#         - echo "Building Gateway"
#         - cd apps/gateway
#         - yarn install
#         - yarn build


# build_community_service:
#     # image: ${NODE_IMAGE}
#     stage: build
#     tags:
#         - remote-shell-dev
#     interruptible: true
#     parallel: 1
 
#     script:
#         - echo "ðŸ§¹ Freeing up disk space..."
#         - docker system prune -af || true
#         - docker volume prune -f || true
#         - echo "Building Community Service"
#         - cd apps/community-service
#         - yarn install
#         - yarn build


deploy:
    stage: deploy
    tags:
        - remote-shell-dev
    interruptible: true
    script:
        - echo "Cleaning up Docker to free space..."
        - docker system prune -af
        - docker volume prune -f
        - echo "Deploying to Remote Dev Server"
        - docker compose -f docker-compose.yml down

        - docker rm -f $(docker ps -a -q --filter name=rabbitmq) || true
        - docker rmi $(docker images rabbitmq:3-management -q) || true
        
        - docker compose -f docker-compose.yml pull
        
        - docker compose -f docker-compose.yml up -d --build